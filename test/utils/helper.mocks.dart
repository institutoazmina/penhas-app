// Mocks generated by Mockito 5.0.16 from annotations
// in penhas/test/utils/helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i19;
import 'dart:convert' as _i77;
import 'dart:io' as _i32;
import 'dart:typed_data' as _i78;

import 'package:dartz/dartz.dart' as _i3;
import 'package:data_connection_checker/data_connection_checker.dart' as _i2;
import 'package:flutter/material.dart' as _i40;
import 'package:http/http.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:penhas/app/core/data/authorization_status.dart' as _i25;
import 'package:penhas/app/core/entities/user_location.dart' as _i39;
import 'package:penhas/app/core/entities/valid_fiel.dart' as _i5;
import 'package:penhas/app/core/error/failures.dart' as _i22;
import 'package:penhas/app/core/managers/app_configuration.dart' as _i24;
import 'package:penhas/app/core/managers/local_store.dart' as _i79;
import 'package:penhas/app/core/managers/location_services.dart' as _i38;
import 'package:penhas/app/core/managers/modules_sevices.dart' as _i26;
import 'package:penhas/app/core/network/api_client.dart' as _i31;
import 'package:penhas/app/core/network/api_server_configure.dart' as _i15;
import 'package:penhas/app/core/network/network_info.dart' as _i30;
import 'package:penhas/app/core/states/location_permission_state.dart' as _i8;
import 'package:penhas/app/core/storage/i_local_storage.dart' as _i20;
import 'package:penhas/app/features/appstate/data/datasources/app_state_data_source.dart'
    as _i72;
import 'package:penhas/app/features/appstate/data/model/app_state_model.dart'
    as _i7;
import 'package:penhas/app/features/appstate/domain/entities/app_preferences_entity.dart'
    as _i18;
import 'package:penhas/app/features/appstate/domain/entities/app_state_entity.dart'
    as _i4;
import 'package:penhas/app/features/appstate/domain/entities/update_user_profile_entity.dart'
    as _i23;
import 'package:penhas/app/features/appstate/domain/entities/user_profile_entity.dart'
    as _i17;
import 'package:penhas/app/features/appstate/domain/repositories/i_app_state_repository.dart'
    as _i21;
import 'package:penhas/app/features/appstate/domain/usecases/app_state_usecase.dart'
    as _i33;
import 'package:penhas/app/features/authentication/data/datasources/authentication_data_source.dart'
    as _i73;
import 'package:penhas/app/features/authentication/data/datasources/change_password_data_source.dart'
    as _i27;
import 'package:penhas/app/features/authentication/data/datasources/user_register_data_source.dart'
    as _i71;
import 'package:penhas/app/features/authentication/data/models/password_reset_response_model.dart'
    as _i6;
import 'package:penhas/app/features/authentication/data/models/session_model.dart'
    as _i13;
import 'package:penhas/app/features/authentication/data/repositories/authentication_repository.dart'
    as _i75;
import 'package:penhas/app/features/authentication/domain/entities/reset_password_response_entity.dart'
    as _i60;
import 'package:penhas/app/features/authentication/domain/entities/session_entity.dart'
    as _i49;
import 'package:penhas/app/features/authentication/domain/repositories/i_authentication_repository.dart'
    as _i48;
import 'package:penhas/app/features/authentication/domain/repositories/i_reset_password_repository.dart'
    as _i59;
import 'package:penhas/app/features/authentication/domain/repositories/i_user_register_repository.dart'
    as _i51;
import 'package:penhas/app/features/authentication/domain/usecases/birthday.dart'
    as _i56;
import 'package:penhas/app/features/authentication/domain/usecases/cep.dart'
    as _i52;
import 'package:penhas/app/features/authentication/domain/usecases/cpf.dart'
    as _i53;
import 'package:penhas/app/features/authentication/domain/usecases/email_address.dart'
    as _i28;
import 'package:penhas/app/features/authentication/domain/usecases/full_name.dart'
    as _i54;
import 'package:penhas/app/features/authentication/domain/usecases/genre.dart'
    as _i57;
import 'package:penhas/app/features/authentication/domain/usecases/human_race.dart'
    as _i58;
import 'package:penhas/app/features/authentication/domain/usecases/nickname.dart'
    as _i55;
import 'package:penhas/app/features/authentication/domain/usecases/sign_in_password.dart'
    as _i50;
import 'package:penhas/app/features/authentication/domain/usecases/sign_up_password.dart'
    as _i29;
import 'package:penhas/app/features/feed/data/datasources/tweet_data_source.dart'
    as _i61;
import 'package:penhas/app/features/feed/data/datasources/tweet_filter_preference_data_source.dart'
    as _i74;
import 'package:penhas/app/features/feed/data/models/tweet_filter_session_model.dart'
    as _i16;
import 'package:penhas/app/features/feed/data/models/tweet_model.dart' as _i10;
import 'package:penhas/app/features/feed/data/models/tweet_session_model.dart'
    as _i9;
import 'package:penhas/app/features/feed/data/repositories/tweet_filter_preference_repository.dart'
    as _i76;
import 'package:penhas/app/features/feed/domain/entities/tweet_engage_request_option.dart'
    as _i44;
import 'package:penhas/app/features/feed/domain/entities/tweet_entity.dart'
    as _i45;
import 'package:penhas/app/features/feed/domain/entities/tweet_filter_session_entity.dart'
    as _i47;
import 'package:penhas/app/features/feed/domain/entities/tweet_request_option.dart'
    as _i43;
import 'package:penhas/app/features/feed/domain/entities/tweet_session_entity.dart'
    as _i42;
import 'package:penhas/app/features/feed/domain/repositories/i_tweet_repositories.dart'
    as _i41;
import 'package:penhas/app/features/feed/domain/usecases/tweet_filter_preference.dart'
    as _i46;
import 'package:penhas/app/features/help_center/data/datasources/guardian_data_source.dart'
    as _i69;
import 'package:penhas/app/features/help_center/data/models/alert_model.dart'
    as _i12;
import 'package:penhas/app/features/help_center/data/models/guardian_session_model.dart'
    as _i11;
import 'package:penhas/app/features/help_center/domain/entities/guardian_session_entity.dart'
    as _i70;
import 'package:penhas/app/features/main_menu/data/model/account_preference_model.dart'
    as _i35;
import 'package:penhas/app/features/main_menu/domain/repositories/user_profile_repository.dart'
    as _i34;
import 'package:penhas/app/features/quiz/data/datasources/quiz_data_source.dart'
    as _i36;
import 'package:penhas/app/features/quiz/domain/entities/quiz_request_entity.dart'
    as _i37;
import 'package:penhas/app/features/support_center/data/repositories/support_center_repository.dart'
    as _i62;
import 'package:penhas/app/features/support_center/domain/entities/geolocation_entity.dart'
    as _i66;
import 'package:penhas/app/features/support_center/domain/entities/support_center_fetch_request.dart'
    as _i65;
import 'package:penhas/app/features/support_center/domain/entities/support_center_metadata_entity.dart'
    as _i63;
import 'package:penhas/app/features/support_center/domain/entities/support_center_place_detail_entity.dart'
    as _i67;
import 'package:penhas/app/features/support_center/domain/entities/support_center_place_entity.dart'
    as _i68;
import 'package:penhas/app/features/support_center/domain/entities/support_center_place_session_entity.dart'
    as _i64;

import 'helper.dart' as _i80;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUri_0 extends _i1.Fake implements Uri {}

class _FakeDuration_1 extends _i1.Fake implements Duration {}

class _FakeAddressCheckResult_2 extends _i1.Fake
    implements _i2.AddressCheckResult {}

class _FakeEither_3<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeAppStateModeEntity_4 extends _i1.Fake
    implements _i4.AppStateModeEntity {}

class _FakeValidField_5 extends _i1.Fake implements _i5.ValidField {}

class _FakePasswordResetResponseModel_6 extends _i1.Fake
    implements _i6.PasswordResetResponseModel {}

class _FakeAppStateModel_7 extends _i1.Fake implements _i7.AppStateModel {}

class _FakeLocationPermissionState_8 extends _i1.Fake
    implements _i8.LocationPermissionState {}

class _FakeTweetSessionModel_9 extends _i1.Fake
    implements _i9.TweetSessionModel {}

class _FakeTweetModel_10 extends _i1.Fake implements _i10.TweetModel {}

class _FakeGuardianSessionModel_11 extends _i1.Fake
    implements _i11.GuardianSessionModel {}

class _FakeAlertModel_12 extends _i1.Fake implements _i12.AlertModel {}

class _FakeSessionModel_13 extends _i1.Fake implements _i13.SessionModel {}

class _FakeClient_14 extends _i1.Fake implements _i14.Client {}

class _FakeIApiServerConfigure_15 extends _i1.Fake
    implements _i15.IApiServerConfigure {}

class _FakeTweetFilterSessionModel_16 extends _i1.Fake
    implements _i16.TweetFilterSessionModel {}

class _FakeResponse_17 extends _i1.Fake implements _i14.Response {}

class _FakeStreamedResponse_18 extends _i1.Fake
    implements _i14.StreamedResponse {}

class _FakeUserProfileEntity_19 extends _i1.Fake
    implements _i17.UserProfileEntity {}

class _FakeAppPreferencesEntity_20 extends _i1.Fake
    implements _i18.AppPreferencesEntity {}

/// A class which mocks [IApiServerConfigure].
///
/// See the documentation for Mockito's code generation for more information.
class MockIApiServerConfigure extends _i1.Mock
    implements _i15.IApiServerConfigure {
  MockIApiServerConfigure() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get baseUri => (super.noSuchMethod(Invocation.getter(#baseUri),
      returnValue: _FakeUri_0()) as Uri);
  @override
  _i19.Future<String?> get apiToken =>
      (super.noSuchMethod(Invocation.getter(#apiToken),
          returnValue: Future<String?>.value()) as _i19.Future<String?>);
  @override
  _i19.Future<String> get userAgent =>
      (super.noSuchMethod(Invocation.getter(#userAgent),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ILocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalStorage extends _i1.Mock implements _i20.ILocalStorage {
  MockILocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<bool> hasKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#hasKey, [key]),
          returnValue: Future<bool>.value(false)) as _i19.Future<bool>);
  @override
  _i19.Future<String?> get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key]),
          returnValue: Future<String?>.value()) as _i19.Future<String?>);
  @override
  _i19.Future<void> put(String? key, String? value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i19.Future<void>);
  @override
  _i19.Future<void> delete(String? key) => (super.noSuchMethod(
      Invocation.method(#delete, [key]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i19.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DataConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataConnectionChecker extends _i1.Mock
    implements _i2.DataConnectionChecker {
  MockDataConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.AddressCheckOptions> get addresses =>
      (super.noSuchMethod(Invocation.getter(#addresses),
              returnValue: <_i2.AddressCheckOptions>[])
          as List<_i2.AddressCheckOptions>);
  @override
  set addresses(List<_i2.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(Invocation.setter(#addresses, _addresses),
          returnValueForMissingStub: null);
  @override
  Duration get checkInterval =>
      (super.noSuchMethod(Invocation.getter(#checkInterval),
          returnValue: _FakeDuration_1()) as Duration);
  @override
  set checkInterval(Duration? _checkInterval) =>
      super.noSuchMethod(Invocation.setter(#checkInterval, _checkInterval),
          returnValueForMissingStub: null);
  @override
  List<_i2.AddressCheckResult> get lastTryResults => (super.noSuchMethod(
      Invocation.getter(#lastTryResults),
      returnValue: <_i2.AddressCheckResult>[]) as List<_i2.AddressCheckResult>);
  @override
  _i19.Future<bool> get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection),
          returnValue: Future<bool>.value(false)) as _i19.Future<bool>);
  @override
  _i19.Future<_i2.DataConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(Invocation.getter(#connectionStatus),
              returnValue: Future<_i2.DataConnectionStatus>.value(
                  _i2.DataConnectionStatus.disconnected))
          as _i19.Future<_i2.DataConnectionStatus>);
  @override
  _i19.Stream<_i2.DataConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(Invocation.getter(#onStatusChange),
              returnValue: Stream<_i2.DataConnectionStatus>.empty())
          as _i19.Stream<_i2.DataConnectionStatus>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get isActivelyChecking =>
      (super.noSuchMethod(Invocation.getter(#isActivelyChecking),
          returnValue: false) as bool);
  @override
  _i19.Future<_i2.AddressCheckResult> isHostReachable(
          _i2.AddressCheckOptions? options) =>
      (super.noSuchMethod(Invocation.method(#isHostReachable, [options]),
              returnValue: Future<_i2.AddressCheckResult>.value(
                  _FakeAddressCheckResult_2()))
          as _i19.Future<_i2.AddressCheckResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IAppStateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppStateRepository extends _i1.Mock
    implements _i21.IAppStateRepository {
  MockIAppStateRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>> check() =>
      (super.noSuchMethod(Invocation.method(#check, []),
              returnValue:
                  Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>.value(
                      _FakeEither_3<_i22.Failure, _i4.AppStateEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>> update(
          _i23.UpdateUserProfileEntity? update) =>
      (super.noSuchMethod(Invocation.method(#update, [update]),
              returnValue:
                  Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>.value(
                      _FakeEither_3<_i22.Failure, _i4.AppStateEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IAppConfiguration].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppConfiguration extends _i1.Mock implements _i24.IAppConfiguration {
  MockIAppConfiguration() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<String> get apiToken =>
      (super.noSuchMethod(Invocation.getter(#apiToken),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  Uri get penhasServer => (super.noSuchMethod(Invocation.getter(#penhasServer),
      returnValue: _FakeUri_0()) as Uri);
  @override
  _i19.Future<_i25.AuthorizationStatus> get authorizationStatus =>
      (super.noSuchMethod(Invocation.getter(#authorizationStatus),
              returnValue: Future<_i25.AuthorizationStatus>.value(
                  _i25.AuthorizationStatus.anonymous))
          as _i19.Future<_i25.AuthorizationStatus>);
  @override
  _i19.Future<_i4.AppStateModeEntity> get appMode => (super.noSuchMethod(
          Invocation.getter(#appMode),
          returnValue:
              Future<_i4.AppStateModeEntity>.value(_FakeAppStateModeEntity_4()))
      as _i19.Future<_i4.AppStateModeEntity>);
  @override
  _i19.Future<void> saveApiToken({String? token}) => (super.noSuchMethod(
      Invocation.method(#saveApiToken, [], {#token: token}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i19.Future<void>);
  @override
  _i19.Future<void> saveAppModes(_i4.AppStateModeEntity? appMode) =>
      (super.noSuchMethod(Invocation.method(#saveAppModes, [appMode]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i19.Future<void>);
  @override
  _i19.Future<void> logout() => (super.noSuchMethod(
      Invocation.method(#logout, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i19.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IAppModulesServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppModulesServices extends _i1.Mock
    implements _i26.IAppModulesServices {
  MockIAppModulesServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<void> save(List<_i4.AppStateModuleEntity>? modules) =>
      (super.noSuchMethod(Invocation.method(#save, [modules]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i19.Future<void>);
  @override
  _i19.Future<bool> isEnabled(String? name) =>
      (super.noSuchMethod(Invocation.method(#isEnabled, [name]),
          returnValue: Future<bool>.value(false)) as _i19.Future<bool>);
  @override
  _i19.Future<_i4.AppStateModuleEntity?> feature({String? name}) =>
      (super.noSuchMethod(Invocation.method(#feature, [], {#name: name}),
              returnValue: Future<_i4.AppStateModuleEntity?>.value())
          as _i19.Future<_i4.AppStateModuleEntity?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IChangePasswordDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIChangePasswordDataSource extends _i1.Mock
    implements _i27.IChangePasswordDataSource {
  MockIChangePasswordDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i5.ValidField> reset(
          {_i28.EmailAddress? emailAddress,
          _i29.SignUpPassword? password,
          String? resetToken}) =>
      (super.noSuchMethod(
              Invocation.method(#reset, [], {
                #emailAddress: emailAddress,
                #password: password,
                #resetToken: resetToken
              }),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  _i19.Future<_i5.ValidField> validToken(
          {_i28.EmailAddress? emailAddress, String? resetToken}) =>
      (super.noSuchMethod(
              Invocation.method(#validToken, [],
                  {#emailAddress: emailAddress, #resetToken: resetToken}),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  _i19.Future<_i6.PasswordResetResponseModel> request(
          {_i28.EmailAddress? emailAddress}) =>
      (super.noSuchMethod(
              Invocation.method(#request, [], {#emailAddress: emailAddress}),
              returnValue: Future<_i6.PasswordResetResponseModel>.value(
                  _FakePasswordResetResponseModel_6()))
          as _i19.Future<_i6.PasswordResetResponseModel>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [INetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkInfo extends _i1.Mock implements _i30.INetworkInfo {
  MockINetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i19.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IApiProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIApiProvider extends _i1.Mock implements _i31.IApiProvider {
  MockIApiProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<String> get(
          {String? path,
          Map<String, String>? headers = const {},
          Map<String, String?>? parameters = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [],
              {#path: path, #headers: headers, #parameters: parameters}),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  _i19.Future<String> post(
          {String? path,
          Map<String, String>? headers = const {},
          Map<String, String?>? parameters = const {},
          String? body}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [], {
            #path: path,
            #headers: headers,
            #parameters: parameters,
            #body: body
          }),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  _i19.Future<String> delete(
          {String? path, Map<String, String?>? parameters = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [], {#path: path, #parameters: parameters}),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  _i19.Future<String> upload(
          {String? path,
          _i14.MultipartFile? file,
          Map<String, String>? headers = const {},
          Map<String, String>? fields}) =>
      (super.noSuchMethod(
          Invocation.method(#upload, [],
              {#path: path, #file: file, #headers: headers, #fields: fields}),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  _i19.Future<String> download(
          {String? path,
          _i32.File? file,
          Map<String, String>? headers = const {},
          Map<String, String>? fields = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#download, [],
              {#path: path, #file: file, #headers: headers, #fields: fields}),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppStateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStateUseCase extends _i1.Mock implements _i33.AppStateUseCase {
  MockAppStateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>> check() =>
      (super.noSuchMethod(Invocation.method(#check, []),
              returnValue:
                  Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>.value(
                      _FakeEither_3<_i22.Failure, _i4.AppStateEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>> update(
          _i23.UpdateUserProfileEntity? update) =>
      (super.noSuchMethod(Invocation.method(#update, [update]),
              returnValue:
                  Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>.value(
                      _FakeEither_3<_i22.Failure, _i4.AppStateEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i4.AppStateEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IUserProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserProfileRepository extends _i1.Mock
    implements _i34.IUserProfileRepository {
  MockIUserProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> stealthMode(
          {bool? toggle}) =>
      (super.noSuchMethod(
          Invocation.method(#stealthMode, [], {#toggle: toggle}),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> anonymousMode(
          {bool? toggle}) =>
      (super.noSuchMethod(
          Invocation.method(#anonymousMode, [], {#toggle: toggle}),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> deleteNotice() =>
      (super.noSuchMethod(Invocation.method(#deleteNotice, []),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> delete(
          {String? password}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#password: password}),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> reactivate(
          {String? token}) =>
      (super.noSuchMethod(Invocation.method(#reactivate, [], {#token: token}),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i35.AccountPreferenceSessionModel>>
      preferences() => (super.noSuchMethod(Invocation.method(#preferences, []),
          returnValue:
              Future<_i3.Either<_i22.Failure, _i35.AccountPreferenceSessionModel>>.value(
                  _FakeEither_3<_i22.Failure,
                      _i35.AccountPreferenceSessionModel>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i35.AccountPreferenceSessionModel>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i35.AccountPreferenceSessionModel>>
      updatePreferences({String? key, bool? status}) => (super.noSuchMethod(
          Invocation.method(
              #updatePreferences, [], {#key: key, #status: status}),
          returnValue:
              Future<_i3.Either<_i22.Failure, _i35.AccountPreferenceSessionModel>>.value(
                  _FakeEither_3<_i22.Failure, _i35.AccountPreferenceSessionModel>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i35.AccountPreferenceSessionModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IQuizDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIQuizDataSource extends _i1.Mock implements _i36.IQuizDataSource {
  MockIQuizDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i7.AppStateModel> update({_i37.QuizRequestEntity? quiz}) =>
      (super.noSuchMethod(Invocation.method(#update, [], {#quiz: quiz}),
              returnValue:
                  Future<_i7.AppStateModel>.value(_FakeAppStateModel_7()))
          as _i19.Future<_i7.AppStateModel>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ILocationServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocationServices extends _i1.Mock implements _i38.ILocationServices {
  MockILocationServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i38.LocationFailure, _i39.UserLocationEntity?>>
      currentLocation() => (super.noSuchMethod(
          Invocation.method(#currentLocation, []),
          returnValue:
              Future<_i3.Either<_i38.LocationFailure, _i39.UserLocationEntity?>>.value(
                  _FakeEither_3<_i38.LocationFailure,
                      _i39.UserLocationEntity?>())) as _i19
          .Future<_i3.Either<_i38.LocationFailure, _i39.UserLocationEntity?>>);
  @override
  _i19.Future<_i8.LocationPermissionState> requestPermission(
          {String? title, _i40.Widget? description}) =>
      (super.noSuchMethod(
              Invocation.method(#requestPermission, [],
                  {#title: title, #description: description}),
              returnValue: Future<_i8.LocationPermissionState>.value(
                  _FakeLocationPermissionState_8()))
          as _i19.Future<_i8.LocationPermissionState>);
  @override
  _i19.Future<_i8.LocationPermissionState> permissionStatus() =>
      (super.noSuchMethod(Invocation.method(#permissionStatus, []),
              returnValue: Future<_i8.LocationPermissionState>.value(
                  _FakeLocationPermissionState_8()))
          as _i19.Future<_i8.LocationPermissionState>);
  @override
  _i19.Future<bool> isPermissionGranted() =>
      (super.noSuchMethod(Invocation.method(#isPermissionGranted, []),
          returnValue: Future<bool>.value(false)) as _i19.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ITweetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITweetRepository extends _i1.Mock implements _i41.ITweetRepository {
  MockITweetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i42.TweetSessionEntity>> fetch(
          {_i43.TweetRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#fetch, [], {#option: option}),
              returnValue: Future<
                      _i3.Either<_i22.Failure, _i42.TweetSessionEntity>>.value(
                  _FakeEither_3<_i22.Failure, _i42.TweetSessionEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i42.TweetSessionEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i42.TweetSessionEntity>> current(
          {_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#current, [], {#option: option}),
              returnValue: Future<
                      _i3.Either<_i22.Failure, _i42.TweetSessionEntity>>.value(
                  _FakeEither_3<_i22.Failure, _i42.TweetSessionEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i42.TweetSessionEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i45.TweetEntity>> create(
          {_i44.TweetCreateRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#create, [], {#option: option}),
          returnValue: Future<_i3.Either<_i22.Failure, _i45.TweetEntity>>.value(
              _FakeEither_3<_i22.Failure, _i45.TweetEntity>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i45.TweetEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i45.TweetEntity>> reply(
          {_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#reply, [], {#option: option}),
          returnValue: Future<_i3.Either<_i22.Failure, _i45.TweetEntity>>.value(
              _FakeEither_3<_i22.Failure, _i45.TweetEntity>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i45.TweetEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i45.TweetEntity>> like(
          {_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#like, [], {#option: option}),
          returnValue: Future<_i3.Either<_i22.Failure, _i45.TweetEntity>>.value(
              _FakeEither_3<_i22.Failure, _i45.TweetEntity>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i45.TweetEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> delete(
          {_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#option: option}),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> report(
          {_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#report, [], {#option: option}),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TweetFilterPreference].
///
/// See the documentation for Mockito's code generation for more information.
class MockTweetFilterPreference extends _i1.Mock
    implements _i46.TweetFilterPreference {
  MockTweetFilterPreference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get categories => (super
          .noSuchMethod(Invocation.getter(#categories), returnValue: <String>[])
      as List<String>);
  @override
  set categories(List<String>? _categories) =>
      super.noSuchMethod(Invocation.setter(#categories, _categories),
          returnValueForMissingStub: null);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i47.TweetFilterSessionEntity>>
      retreive() => (super.noSuchMethod(Invocation.method(#retreive, []),
              returnValue: Future<
                      _i3.Either<_i22.Failure,
                          _i47.TweetFilterSessionEntity>>.value(
                  _FakeEither_3<_i22.Failure, _i47.TweetFilterSessionEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i47.TweetFilterSessionEntity>>);
  @override
  void saveTags(List<String?>? tags) =>
      super.noSuchMethod(Invocation.method(#saveTags, [tags]),
          returnValueForMissingStub: null);
  @override
  List<String> getTags() => (super.noSuchMethod(Invocation.method(#getTags, []),
      returnValue: <String>[]) as List<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthenticationRepository extends _i1.Mock
    implements _i48.IAuthenticationRepository {
  MockIAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>
      signInWithEmailAndPassword(
              {_i28.EmailAddress? emailAddress,
              _i50.SignInPassword? password}) =>
          (super.noSuchMethod(
                  Invocation.method(#signInWithEmailAndPassword, [],
                      {#emailAddress: emailAddress, #password: password}),
                  returnValue:
                      Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>.value(
                          _FakeEither_3<_i22.Failure, _i49.SessionEntity>()))
              as _i19.Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IUserRegisterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRegisterRepository extends _i1.Mock
    implements _i51.IUserRegisterRepository {
  MockIUserRegisterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i49.SessionEntity>> signup(
          {_i28.EmailAddress? emailAddress,
          _i29.SignUpPassword? password,
          _i52.Cep? cep,
          _i53.Cpf? cpf,
          _i54.Fullname? fullname,
          _i54.Fullname? socialName,
          _i55.Nickname? nickName,
          _i56.Birthday? birthday,
          _i57.Genre? genre,
          _i58.HumanRace? race}) =>
      (super.noSuchMethod(
              Invocation.method(#signup, [], {
                #emailAddress: emailAddress,
                #password: password,
                #cep: cep,
                #cpf: cpf,
                #fullname: fullname,
                #socialName: socialName,
                #nickName: nickName,
                #birthday: birthday,
                #genre: genre,
                #race: race
              }),
              returnValue:
                  Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>.value(
                      _FakeEither_3<_i22.Failure, _i49.SessionEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> checkField(
          {_i28.EmailAddress? emailAddress,
          _i29.SignUpPassword? password,
          _i52.Cep? cep,
          _i53.Cpf? cpf,
          _i54.Fullname? fullname,
          _i54.Fullname? socialName,
          _i55.Nickname? nickName,
          _i56.Birthday? birthday,
          _i57.Genre? genre,
          _i58.HumanRace? race}) =>
      (super.noSuchMethod(
          Invocation.method(#checkField, [], {
            #emailAddress: emailAddress,
            #password: password,
            #cep: cep,
            #cpf: cpf,
            #fullname: fullname,
            #socialName: socialName,
            #nickName: nickName,
            #birthday: birthday,
            #genre: genre,
            #race: race
          }),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IResetPasswordRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIResetPasswordRepository extends _i1.Mock
    implements _i59.IResetPasswordRepository {
  MockIResetPasswordRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i60.ResetPasswordResponseEntity>> request(
          {_i28.EmailAddress? emailAddress}) =>
      (super.noSuchMethod(
          Invocation.method(#request, [], {#emailAddress: emailAddress}),
          returnValue:
              Future<_i3.Either<_i22.Failure, _i60.ResetPasswordResponseEntity>>.value(
                  _FakeEither_3<_i22.Failure,
                      _i60.ResetPasswordResponseEntity>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i60.ResetPasswordResponseEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ITweetDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockITweetDataSource extends _i1.Mock implements _i61.ITweetDataSource {
  MockITweetDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i9.TweetSessionModel> fetch({_i43.TweetRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#fetch, [], {#option: option}),
              returnValue: Future<_i9.TweetSessionModel>.value(
                  _FakeTweetSessionModel_9()))
          as _i19.Future<_i9.TweetSessionModel>);
  @override
  _i19.Future<_i9.TweetSessionModel> current(
          {_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#current, [], {#option: option}),
              returnValue: Future<_i9.TweetSessionModel>.value(
                  _FakeTweetSessionModel_9()))
          as _i19.Future<_i9.TweetSessionModel>);
  @override
  _i19.Future<_i10.TweetModel> like({_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#like, [], {#option: option}),
              returnValue: Future<_i10.TweetModel>.value(_FakeTweetModel_10()))
          as _i19.Future<_i10.TweetModel>);
  @override
  _i19.Future<_i10.TweetModel> create(
          {_i44.TweetCreateRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#create, [], {#option: option}),
              returnValue: Future<_i10.TweetModel>.value(_FakeTweetModel_10()))
          as _i19.Future<_i10.TweetModel>);
  @override
  _i19.Future<_i10.TweetModel> reply({_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#reply, [], {#option: option}),
              returnValue: Future<_i10.TweetModel>.value(_FakeTweetModel_10()))
          as _i19.Future<_i10.TweetModel>);
  @override
  _i19.Future<_i5.ValidField> report({_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#report, [], {#option: option}),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  _i19.Future<_i5.ValidField> delete({_i44.TweetEngageRequestOption? option}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#option: option}),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ISupportCenterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISupportCenterRepository extends _i1.Mock
    implements _i62.ISupportCenterRepository {
  MockISupportCenterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i63.SupportCenterMetadataEntity?>>
      metadata() => (super.noSuchMethod(Invocation.method(#metadata, []),
          returnValue:
              Future<_i3.Either<_i22.Failure, _i63.SupportCenterMetadataEntity?>>.value(
                  _FakeEither_3<_i22.Failure,
                      _i63.SupportCenterMetadataEntity?>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i63.SupportCenterMetadataEntity?>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i64.SupportCenterPlaceSessionEntity>> fetch(
          _i65.SupportCenterFetchRequest? options) =>
      (super.noSuchMethod(Invocation.method(#fetch, [options]),
          returnValue:
              Future<_i3.Either<_i22.Failure, _i64.SupportCenterPlaceSessionEntity>>.value(
                  _FakeEither_3<_i22.Failure,
                      _i64.SupportCenterPlaceSessionEntity>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i64.SupportCenterPlaceSessionEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i66.GeolocationEntity>> mapGeoFromCep(
          String? cep) =>
      (super.noSuchMethod(Invocation.method(#mapGeoFromCep, [cep]),
              returnValue: Future<
                      _i3.Either<_i22.Failure, _i66.GeolocationEntity>>.value(
                  _FakeEither_3<_i22.Failure, _i66.GeolocationEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i66.GeolocationEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i67.SupportCenterPlaceDetailEntity>>
      detail(_i68.SupportCenterPlaceEntity? placeEntity) => (super.noSuchMethod(
          Invocation.method(#detail, [placeEntity]),
          returnValue:
              Future<_i3.Either<_i22.Failure, _i67.SupportCenterPlaceDetailEntity>>.value(
                  _FakeEither_3<_i22.Failure,
                      _i67.SupportCenterPlaceDetailEntity>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i67.SupportCenterPlaceDetailEntity>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> rate(
          _i68.SupportCenterPlaceEntity? place, double? rate) =>
      (super.noSuchMethod(Invocation.method(#rate, [place, rate]),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i12.AlertModel>> suggestion(
          {String? name,
          String? email,
          String? address,
          String? category,
          String? observation,
          String? cep,
          String? coverage,
          String? complement,
          String? neighborhood,
          String? city,
          String? uf,
          String? number,
          String? hour,
          String? ddd1,
          String? phone1,
          String? ddd2,
          String? phone2,
          String? hasWhatsapp,
          String? is24h}) =>
      (super.noSuchMethod(
          Invocation.method(#suggestion, [], {
            #name: name,
            #email: email,
            #address: address,
            #category: category,
            #observation: observation,
            #cep: cep,
            #coverage: coverage,
            #complement: complement,
            #neighborhood: neighborhood,
            #city: city,
            #uf: uf,
            #number: number,
            #hour: hour,
            #ddd1: ddd1,
            #phone1: phone1,
            #ddd2: ddd2,
            #phone2: phone2,
            #hasWhatsapp: hasWhatsapp,
            #is24h: is24h
          }),
          returnValue: Future<_i3.Either<_i22.Failure, _i12.AlertModel>>.value(
              _FakeEither_3<_i22.Failure, _i12.AlertModel>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i12.AlertModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IGuardianDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGuardianDataSource extends _i1.Mock
    implements _i69.IGuardianDataSource {
  MockIGuardianDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i11.GuardianSessionModel> fetch() =>
      (super.noSuchMethod(Invocation.method(#fetch, []),
              returnValue: Future<_i11.GuardianSessionModel>.value(
                  _FakeGuardianSessionModel_11()))
          as _i19.Future<_i11.GuardianSessionModel>);
  @override
  _i19.Future<_i12.AlertModel> create(_i70.GuardianContactEntity? guardian) =>
      (super.noSuchMethod(Invocation.method(#create, [guardian]),
              returnValue: Future<_i12.AlertModel>.value(_FakeAlertModel_12()))
          as _i19.Future<_i12.AlertModel>);
  @override
  _i19.Future<_i5.ValidField> update(_i70.GuardianContactEntity? guardian) =>
      (super.noSuchMethod(Invocation.method(#update, [guardian]),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  _i19.Future<_i5.ValidField> delete(_i70.GuardianContactEntity? guardian) =>
      (super.noSuchMethod(Invocation.method(#delete, [guardian]),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  _i19.Future<_i12.AlertModel> alert(_i39.UserLocationEntity? location) =>
      (super.noSuchMethod(Invocation.method(#alert, [location]),
              returnValue: Future<_i12.AlertModel>.value(_FakeAlertModel_12()))
          as _i19.Future<_i12.AlertModel>);
  @override
  _i19.Future<_i5.ValidField> callPolice() =>
      (super.noSuchMethod(Invocation.method(#callPolice, []),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IUserRegisterDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRegisterDataSource extends _i1.Mock
    implements _i71.IUserRegisterDataSource {
  MockIUserRegisterDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i13.SessionModel> register(
          {_i28.EmailAddress? emailAddress,
          _i29.SignUpPassword? password,
          _i52.Cep? cep,
          _i53.Cpf? cpf,
          _i54.Fullname? fullname,
          _i54.Fullname? socialName,
          _i55.Nickname? nickName,
          _i56.Birthday? birthday,
          _i57.Genre? genre,
          _i58.HumanRace? race}) =>
      (super.noSuchMethod(
              Invocation.method(#register, [], {
                #emailAddress: emailAddress,
                #password: password,
                #cep: cep,
                #cpf: cpf,
                #fullname: fullname,
                #socialName: socialName,
                #nickName: nickName,
                #birthday: birthday,
                #genre: genre,
                #race: race
              }),
              returnValue:
                  Future<_i13.SessionModel>.value(_FakeSessionModel_13()))
          as _i19.Future<_i13.SessionModel>);
  @override
  _i19.Future<_i5.ValidField> checkField(
          {_i28.EmailAddress? emailAddress,
          _i29.SignUpPassword? password,
          _i52.Cep? cep,
          _i53.Cpf? cpf,
          _i54.Fullname? fullname,
          _i54.Fullname? socialName,
          _i55.Nickname? nickName,
          _i56.Birthday? birthday,
          _i57.Genre? genre,
          _i58.HumanRace? race}) =>
      (super.noSuchMethod(
              Invocation.method(#checkField, [], {
                #emailAddress: emailAddress,
                #password: password,
                #cep: cep,
                #cpf: cpf,
                #fullname: fullname,
                #socialName: socialName,
                #nickName: nickName,
                #birthday: birthday,
                #genre: genre,
                #race: race
              }),
              returnValue: Future<_i5.ValidField>.value(_FakeValidField_5()))
          as _i19.Future<_i5.ValidField>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IAppStateDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppStateDataSource extends _i1.Mock
    implements _i72.IAppStateDataSource {
  MockIAppStateDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i7.AppStateModel> check() => (super.noSuchMethod(
          Invocation.method(#check, []),
          returnValue: Future<_i7.AppStateModel>.value(_FakeAppStateModel_7()))
      as _i19.Future<_i7.AppStateModel>);
  @override
  _i19.Future<_i7.AppStateModel> update(_i23.UpdateUserProfileEntity? update) =>
      (super.noSuchMethod(Invocation.method(#update, [update]),
              returnValue:
                  Future<_i7.AppStateModel>.value(_FakeAppStateModel_7()))
          as _i19.Future<_i7.AppStateModel>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IChangePasswordRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIChangePasswordRepository extends _i1.Mock
    implements _i59.IChangePasswordRepository {
  MockIChangePasswordRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> validToken(
          {_i28.EmailAddress? emailAddress, String? resetToken}) =>
      (super.noSuchMethod(
          Invocation.method(#validToken, [],
              {#emailAddress: emailAddress, #resetToken: resetToken}),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  _i19.Future<_i3.Either<_i22.Failure, _i5.ValidField>> reset(
          {_i28.EmailAddress? emailAddress,
          _i29.SignUpPassword? password,
          String? resetToken}) =>
      (super.noSuchMethod(
          Invocation.method(#reset, [], {
            #emailAddress: emailAddress,
            #password: password,
            #resetToken: resetToken
          }),
          returnValue: Future<_i3.Either<_i22.Failure, _i5.ValidField>>.value(
              _FakeEither_3<_i22.Failure, _i5.ValidField>())) as _i19
          .Future<_i3.Either<_i22.Failure, _i5.ValidField>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AuthenticationDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationDataSource extends _i1.Mock
    implements _i73.AuthenticationDataSource {
  MockAuthenticationDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Client get apiClient =>
      (super.noSuchMethod(Invocation.getter(#apiClient),
          returnValue: _FakeClient_14()) as _i14.Client);
  @override
  _i15.IApiServerConfigure get serverConfiguration => (super.noSuchMethod(
      Invocation.getter(#serverConfiguration),
      returnValue: _FakeIApiServerConfigure_15()) as _i15.IApiServerConfigure);
  @override
  _i19.Future<_i13.SessionModel> signInWithEmailAndPassword(
          {_i28.EmailAddress? emailAddress, _i50.SignInPassword? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue:
                  Future<_i13.SessionModel>.value(_FakeSessionModel_13()))
          as _i19.Future<_i13.SessionModel>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ITweetFilterPreferenceDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockITweetFilterPreferenceDataSource extends _i1.Mock
    implements _i74.ITweetFilterPreferenceDataSource {
  MockITweetFilterPreferenceDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i16.TweetFilterSessionModel> fetch() =>
      (super.noSuchMethod(Invocation.method(#fetch, []),
              returnValue: Future<_i16.TweetFilterSessionModel>.value(
                  _FakeTweetFilterSessionModel_16()))
          as _i19.Future<_i16.TweetFilterSessionModel>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i75.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>
      signInWithEmailAndPassword(
              {_i28.EmailAddress? emailAddress,
              _i50.SignInPassword? password}) =>
          (super.noSuchMethod(
                  Invocation.method(#signInWithEmailAndPassword, [],
                      {#emailAddress: emailAddress, #password: password}),
                  returnValue:
                      Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>.value(
                          _FakeEither_3<_i22.Failure, _i49.SessionEntity>()))
              as _i19.Future<_i3.Either<_i22.Failure, _i49.SessionEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ITweetFilterPreferenceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITweetFilterPreferenceRepository extends _i1.Mock
    implements _i76.ITweetFilterPreferenceRepository {
  MockITweetFilterPreferenceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Either<_i22.Failure, _i47.TweetFilterSessionEntity>>
      retreive() => (super.noSuchMethod(Invocation.method(#retreive, []),
              returnValue: Future<
                      _i3.Either<_i22.Failure,
                          _i47.TweetFilterSessionEntity>>.value(
                  _FakeEither_3<_i22.Failure, _i47.TweetFilterSessionEntity>()))
          as _i19.Future<_i3.Either<_i22.Failure, _i47.TweetFilterSessionEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i14.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i14.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i14.Response>.value(_FakeResponse_17()))
          as _i19.Future<_i14.Response>);
  @override
  _i19.Future<_i14.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i14.Response>.value(_FakeResponse_17()))
          as _i19.Future<_i14.Response>);
  @override
  _i19.Future<_i14.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i77.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse_17()))
          as _i19.Future<_i14.Response>);
  @override
  _i19.Future<_i14.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i77.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse_17()))
          as _i19.Future<_i14.Response>);
  @override
  _i19.Future<_i14.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i77.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse_17()))
          as _i19.Future<_i14.Response>);
  @override
  _i19.Future<_i14.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i77.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i14.Response>.value(_FakeResponse_17()))
          as _i19.Future<_i14.Response>);
  @override
  _i19.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i19.Future<String>);
  @override
  _i19.Future<_i78.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i78.Uint8List>.value(_i78.Uint8List(0)))
          as _i19.Future<_i78.Uint8List>);
  @override
  _i19.Future<_i14.StreamedResponse> send(_i14.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i14.StreamedResponse>.value(
                  _FakeStreamedResponse_18()))
          as _i19.Future<_i14.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileStore extends _i1.Mock
    implements _i79.LocalStore<_i17.UserProfileEntity> {
  MockUserProfileStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> toJson(_i17.UserProfileEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#toJson, [entity]),
              returnValue: _i80.userProfileEntityToJson(entity))
          as Map<String, dynamic>);
  @override
  _i17.UserProfileEntity fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
              returnValue: _i80.userProfileEntityFromJson(json))
          as _i17.UserProfileEntity);
  @override
  _i17.UserProfileEntity defaultEntity() =>
      (super.noSuchMethod(Invocation.method(#defaultEntity, []),
              returnValue: _i80.userProfileEntityDefaultEntity())
          as _i17.UserProfileEntity);
  @override
  _i19.Future<_i17.UserProfileEntity> retrieve() => (super.noSuchMethod(
          Invocation.method(#retrieve, []),
          returnValue:
              Future<_i17.UserProfileEntity>.value(_FakeUserProfileEntity_19()))
      as _i19.Future<_i17.UserProfileEntity>);
  @override
  _i19.Future<void> save(_i17.UserProfileEntity? entity) => (super.noSuchMethod(
      Invocation.method(#save, [entity]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i19.Future<void>);
  @override
  _i19.Future<void> delete() => (super.noSuchMethod(
      Invocation.method(#delete, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i19.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppPreferencesStore extends _i1.Mock
    implements _i79.LocalStore<_i18.AppPreferencesEntity> {
  MockAppPreferencesStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> toJson(_i18.AppPreferencesEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#toJson, [entity]),
              returnValue: _i80.appPreferencesEntityToJson(entity))
          as Map<String, dynamic>);
  @override
  _i18.AppPreferencesEntity fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
              returnValue: _i80.appPreferencesEntityFromJson(json))
          as _i18.AppPreferencesEntity);
  @override
  _i18.AppPreferencesEntity defaultEntity() =>
      (super.noSuchMethod(Invocation.method(#defaultEntity, []),
              returnValue: _i80.appPreferencesEntityDefaultEntity())
          as _i18.AppPreferencesEntity);
  @override
  _i19.Future<_i18.AppPreferencesEntity> retrieve() =>
      (super.noSuchMethod(Invocation.method(#retrieve, []),
              returnValue: Future<_i18.AppPreferencesEntity>.value(
                  _FakeAppPreferencesEntity_20()))
          as _i19.Future<_i18.AppPreferencesEntity>);
  @override
  _i19.Future<void> save(_i18.AppPreferencesEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#save, [entity]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i19.Future<void>);
  @override
  _i19.Future<void> delete() => (super.noSuchMethod(
      Invocation.method(#delete, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i19.Future<void>);
  @override
  String toString() => super.toString();
}
