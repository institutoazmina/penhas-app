
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
    id'com.google.firebase.crashlytics'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}


def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    throw GradleException("versionCode not found. Define flutter.versionCode in the local.properties file.")
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    throw GradleException("versionName not found. Define flutter.versionName in the local.properties file.")
}
def secretsPropertiesFile = rootProject.file("secrets.properties")
def secretsProperties = new Properties()
if (secretsPropertiesFile.exists()){
    secretsProperties.load(new FileInputStream(secretsPropertiesFile))
}



def isFirebaseDistribution = System.getenv('IS_FIREBASE_DISTRIBUTION') == 'true'


android {
    namespace 'penhas.com.br'

    compileSdkVersion 34

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "penhas.com.br"
        minSdkVersion 22
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders["GEO_API_KEY"] = System.getenv('GEO_API_KEY') ?: secretsProperties.getProperty('GEO_API_KEY')
    }
    
    buildFeatures {
        buildConfig true
    }

    signingConfigs {
        release {
            keyAlias secretsProperties['keyAlias']
            keyPassword secretsProperties['keyPassword']
            storeFile secretsProperties['storeFile'] ? file(secretsProperties['storeFile']) : null
            storePassword secretsProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        if (variant.name.contains("debug") || isFirebaseDistribution) {
            variant.mergedFlavor.applicationId = "dev.penhas.com.br"
        }
    }

    sourceSets {
        debug {
            res.srcDirs += ['src/dev/res']
        }
        release {
            res.srcDirs += isFirebaseDistribution ? ['src/dev/res'] : []
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
